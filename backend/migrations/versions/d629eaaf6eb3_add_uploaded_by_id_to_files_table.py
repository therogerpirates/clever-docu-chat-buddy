"""Add uploaded_by_id to files table

Revision ID: d629eaaf6eb3
Revises: 
Create Date: 2025-06-16 11:30:25.058298

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision: str = 'd629eaaf6eb3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('linkedin_data')
    op.drop_table('bank')
    op.drop_table('website_data')
    op.drop_table('faq_data')
    
    # First, add the column as nullable
    op.add_column('files', sa.Column('uploaded_by_id', sa.Integer(), nullable=True))
    
    # Create a connection to execute raw SQL
    conn = op.get_bind()
    
    # Get the first user ID to use as default
    result = conn.execute(text("SELECT id FROM users ORDER BY id LIMIT 1"))
    default_user_id = result.scalar()
    
    if default_user_id is None:
        # If no users exist, create a default admin user
        from app.models import User, UserRole
        from app.database import SessionLocal
        from app.auth import get_password_hash
        
        db = SessionLocal()
        try:
            admin_user = User(
                username="admin",
                email="admin@example.com",
                password_hash=get_password_hash("admin"),
                role=UserRole.ADMIN,
                full_name="Admin User"
            )
            db.add(admin_user)
            db.commit()
            db.refresh(admin_user)
            default_user_id = admin_user.id
        except Exception as e:
            db.rollback()
            raise e
        finally:
            db.close()
    
    # Update existing files with the default user ID
    if default_user_id is not None:
        conn.execute(
            text("UPDATE files SET uploaded_by_id = :user_id WHERE uploaded_by_id IS NULL"),
            {"user_id": default_user_id}
        )
    
    # Now alter the column to be non-nullable
    op.alter_column('files', 'uploaded_by_id', nullable=False)
    
    # Finally, add the foreign key constraint
    op.create_foreign_key('files_uploaded_by_id_fkey', 'files', 'users', ['uploaded_by_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('files_uploaded_by_id_fkey', 'files', type_='foreignkey')
    op.drop_column('files', 'uploaded_by_id')
    op.create_table('faq_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('question', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('faq_data_pkey'))
    )
    op.create_table('website_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('section', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('website_data_pkey'))
    )
    op.create_table('bank',
    sa.Column('customer_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('age', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('gender', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contact_number', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('account_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('account_balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('date_of_account_opening', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_transaction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('transactionid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('transaction_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('transaction_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('transaction_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('account_balance_after_transaction', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('branch_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loan_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loan_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loan_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interest_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('loan_term', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('approval_rejection_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('loan_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cardid', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('card_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('credit_limit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('credit_card_balance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('minimum_payment_due', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('payment_due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_credit_card_payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('rewards_points', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('feedback_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('feedback_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('feedback_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resolution_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resolution_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('anomaly', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_table('linkedin_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('keyword', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('current_company_linkedin_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('member_distance', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('linkedin_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('headline', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('followers', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('websites', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('about', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('experiences', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('volunteering', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('languages', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organizations', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('honors', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_skills', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_education', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_experiences', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('linkedin_data_pkey'))
    )
    # ### end Alembic commands ###
